# -*- coding: utf-8 -*-
"""Preprocessing 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zbHfrfYoQUtcQaPfGVGWozlm0LK2hSkp

Import Libraries
"""

import scipy.io
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from itertools import groupby
from operator import itemgetter
from scipy.signal import savgol_filter

"""Import & Clean Data"""

lookednegative = scipy.io.loadmat('/content/lookedNegative.mat')
print(lookednegative.keys())

lookednegative_df = pd.DataFrame(lookednegative['lookedNegative'])
lookednegative_df

lookedpositive = scipy.io.loadmat('/content/lookedPositive.mat')
print(lookedpositive.keys())

lookedpositive_df = pd.DataFrame(lookedpositive['lookedPositive'])
lookedpositive_df

picturetime = scipy.io.loadmat('/content/pictureTime.mat')
print(picturetime.keys())

picturetime_df = pd.DataFrame(picturetime['pictureTime'])
picturetime_df

rtpull = scipy.io.loadmat('/content/reactionTimePull.mat')
print(rtpull.keys())

rtpull_df = pd.DataFrame(rtpull['reactionTimePull'])
rtpull_df

rtpush = scipy.io.loadmat('/content/reactionTimePush.mat')
print(rtpush.keys())

rtpush_df = pd.DataFrame(rtpush['reactionTimePush'])
rtpush_df

saccade = scipy.io.loadmat('/content/saccadeTime.mat')
print(saccade.keys())

saccade_df = pd.DataFrame(saccade['saccadeTime'])
saccade_df

sidelook = scipy.io.loadmat('/content/sideLooked.mat')
print(sidelook.keys())

sidelook_df = pd.DataFrame(sidelook['sideLooked'])
sidelook_df

x_left = scipy.io.loadmat('xPositionLeft.mat')['xPositionLeft']
x_right = scipy.io.loadmat('xPositionRight.mat')['xPositionRight']
time_vec = scipy.io.loadmat('timeVector.mat')['timeVector']

x_left_merged.shape

x_right_merged.shape

time_merged.shape

"""#Defining Threshold"""

#middle of the screen 960

lower_threshold = 860
upper_threshold = 1060

p = 0
t = 0

x_left = x_left_merged[p, t, :]
time = time_merged[p, t, :]

# Picture onset time (500th sample point)
onset_index = 500
onset_time = time[onset_index]

# Plot
plt.figure(figsize=(8, 6))
plt.plot(time, x_left, label='Left Eye', color='blue')

# Threshold lines
plt.axhline(y=lower_threshold, color='red', linestyle='--', label='Lower Threshold (← left)')
plt.axhline(y=upper_threshold, color='red', linestyle='--', label='Upper Threshold (→ right)')

# Picture onset line
plt.axvline(x=onset_time, color='green', linestyle='-.', label='Picture Onset')

# Ploting
plt.title(f'Participant {p+1} - Trial {t+1} - Left Eye')
plt.xlabel('Time (ms)')
plt.ylabel('X Position (pixels)')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

p = 44
t = 34

x_left = x_left_merged[p, t, :]
time = time_merged[p, t, :]

# Picture onset time (500th sample point)
onset_index = 500
onset_time = time[onset_index]

# Plot
plt.figure(figsize=(8, 6))
plt.plot(time, x_left, label='Left Eye', color='blue')

# Threshold lines
plt.axhline(y=lower_threshold, color='red', linestyle='--', label='Lower Threshold (← left)')
plt.axhline(y=upper_threshold, color='red', linestyle='--', label='Upper Threshold (→ right)')

# Picture onset line
plt.axvline(x=onset_time, color='green', linestyle='-.', label='Picture Onset')

# Ploting
plt.title(f'Participant {p+1} - Trial {t+1} - Left Eye')
plt.xlabel('Time (ms)')
plt.ylabel('X Position (pixels)')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

"""#Appliyin threshold for all data"""

# Currently only LEFT EYE is used.
# This may be replaced with DOMINANT EYE data in the future.
eye_data = x_left_merged
time_data = time_merged

# Empty list to store results
results = []

# For each participant and each trial
for p in range(eye_data.shape[0]):  # participant
    for t in range(eye_data.shape[1]):  #  trials
        x_eye = eye_data[p, t, :]
        time = time_data[p, t, :]

        # Let's find which region it is in for each time point
        labels = []
        for x in x_eye:
            if x < lower_threshold:
                labels.append('left')
            elif x > upper_threshold:
                labels.append('right')
            else:
                labels.append('center')

        # Trial result
        trial_result = pd.DataFrame({
            'Participant': p + 1,
            'Trial': t + 1,
            'Time(ms)': time,
            'X_Eye_Position': x_eye,
            'Region': labels
        })

        results.append(trial_result)

# Merge all trials
final_df = pd.concat(results, ignore_index=True)

# Final look
print(final_df)

# Select the participant (0-indexed)
p = 34

# Get the total number of trials for this participant
num_trials = time_merged.shape[1]

# Define the number of columns in the subplot layout
cols = 4
# Calculate the number of rows needed (rounded up)
rows = (num_trials + cols - 1) // cols

# Set the overall figure size based on the number of subplots
plt.figure(figsize=(cols * 5, rows * 4))

# Loop through each trial for the selected participant
for t in range(num_trials):
    # Extract left eye x-position and time data
    x_left = x_left_merged[p, t, :]
    time = time_merged[p, t, :]

    # Define picture onset time (500th sample point)
    onset_index = 500
    onset_time = time[onset_index]

    # Create a subplot for the current trial
    ax = plt.subplot(rows, cols, t + 1)

    # Plot the left eye x-position over time
    ax.plot(time, x_left, label='Left Eye', color='blue')

    # Add horizontal threshold lines (left and right)
    ax.axhline(y=lower_threshold, color='red', linestyle='--', label='Lower Threshold')
    ax.axhline(y=upper_threshold, color='red', linestyle='--', label='Upper Threshold')

    # Add a vertical line for picture onset
    ax.axvline(x=onset_time, color='green', linestyle='-.', label='Picture Onset')

    # Add labels and grid
    ax.set_title(f'Trial {t+1}')
    ax.set_xlabel('Time (ms)')
    ax.set_ylabel('X Position (px)')
    ax.grid(True)

    # Only show the legend on the first subplot to avoid clutter
    if t == 0:
        ax.legend()

# Adjust layout and add a common title
plt.tight_layout()
plt.suptitle(f'Participant {p+1} - All Trials', fontsize=16, y=1.02)
plt.show()

# Select the participant (0-indexed)
p = 53

# Get the total number of trials for this participant
num_trials = time_merged.shape[1]

# Define the number of columns in the subplot layout
cols = 4
# Calculate the number of rows needed (rounded up)
rows = (num_trials + cols - 1) // cols

# Set the overall figure size based on the number of subplots
plt.figure(figsize=(cols * 5, rows * 4))

# Loop through each trial for the selected participant
for t in range(num_trials):
    # Extract left eye x-position and time data
    x_left = x_left_merged[p, t, :]
    time = time_merged[p, t, :]

    # Define picture onset time (500th sample point)
    onset_index = 500
    onset_time = time[onset_index]

    # Create a subplot for the current trial
    ax = plt.subplot(rows, cols, t + 1)

    # Plot the left eye x-position over time
    ax.plot(time, x_left, label='Left Eye', color='blue')

    # Add horizontal threshold lines (left and right)
    ax.axhline(y=lower_threshold, color='red', linestyle='--', label='Lower Threshold')
    ax.axhline(y=upper_threshold, color='red', linestyle='--', label='Upper Threshold')

    # Add a vertical line for picture onset
    ax.axvline(x=onset_time, color='green', linestyle='-.', label='Picture Onset')

    # Add labels and grid
    ax.set_title(f'Trial {t+1}')
    ax.set_xlabel('Time (ms)')
    ax.set_ylabel('X Position (px)')
    ax.grid(True)

    # Only show the legend on the first subplot to avoid clutter
    if t == 0:
        ax.legend()

# Adjust layout and add a common title
plt.tight_layout()
plt.suptitle(f'Participant {p+1} - All Trials', fontsize=16, y=1.02)
plt.show()

"""#First Fixation Calculation"""

from itertools import groupby
from operator import itemgetter
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.signal import savgol_filter
import scipy.io as sio

# Parameters
picture_onset_index = 500
velocity_threshold = 5
stability_threshold = 50
window_size = 20
screen_center = 960
margin = 100
lower_threshold = screen_center - margin
upper_threshold = screen_center + margin

# Dimensions and empty matrices
num_participants, num_trials, _ = x_left_merged.shape
fixation_start_times = np.full((num_participants, num_trials), np.nan)
fixation_end_times = np.full((num_participants, num_trials), np.nan)
missing_fixation_trials = []

for row in range(num_participants):
    for trial in range(num_trials):
        x_data = x_left_merged[row, trial, :]
        t_data = time_merged[row, trial, :]
        velocity = np.abs(np.diff(x_data))

        saccade_detected = False
        fixation_start = None

        # Picture onset time
        onset_time = t_data[picture_onset_index]

        # Find the first fixation
        for i in range(picture_onset_index + 20, len(x_data) - window_size):
            if not saccade_detected:
                # Saccade detected only if velocity is high and eye moved outside threshold
                if velocity[i - 1] > velocity_threshold and (x_data[i] < lower_threshold or x_data[i] > upper_threshold):
                    saccade_detected = True
                    continue

            if saccade_detected:
                window = x_data[i : i + window_size]
                if np.nanmax(window) - np.nanmin(window) <= stability_threshold:
                    # Ensure fixation point is outside the center threshold zone
                    if x_data[i] < lower_threshold or x_data[i] > upper_threshold:
                        fixation_start = t_data[i + 3]
                        break

        # If there is fixation, find its ending
        if fixation_start is not None:
            fixation_end = None
            try:
                fixation_index = np.nanargmin(np.abs(t_data - fixation_start))
            except:
                fixation_index = picture_onset_index  # fallback

            fixation_dir = 'left' if x_data[fixation_index] < screen_center else 'right'
            last_stable = None

            for i in range(fixation_index + 1, len(x_data) - window_size):
                window = x_data[i - window_size : i]
                if np.nanmax(window) - np.nanmin(window) <= stability_threshold:
                    last_stable = t_data[i - 3]

                if (
                    velocity[i - 1] > velocity_threshold and
                    ((fixation_dir == 'left' and x_data[i] > lower_threshold) or
                     (fixation_dir == 'right' and x_data[i] < upper_threshold))
                ):
                    fixation_end = last_stable if last_stable is not None else t_data[i - 1]
                    break

            if fixation_end is None:
                fixation_end = t_data[-1]

            fixation_start_times[row, trial] = fixation_start
            fixation_end_times[row, trial] = fixation_end
        else:
            missing_fixation_trials.append((row, trial))

# Save the fixation times
sio.savemat("fixationStartTimes.mat", {"fixationStartTimes": fixation_start_times})
sio.savemat("fixationEndTimes.mat", {"fixationEndTimes": fixation_end_times})

print("Fixation start and end times were recorded.")
print(f"Number of trials where fixation was not found: {len(missing_fixation_trials)}")

print("Fixation start and end times were recorded.")
print(f" Number of trials where fixation was not found: {len(missing_fixation_trials)}")

missing_readable = [(p + 1, t + 1) for p, t in missing_fixation_trials]
missing_df = pd.DataFrame(missing_readable, columns=['Participant', 'Trial'])

missing_df

def plot_fixation(participant_number, trial_number):
    # Parameters
    picture_onset_index = 500
    screen_center = 960
    margin = 100
    lower_threshold = screen_center - margin
    upper_threshold = screen_center + margin

    # Python index
    p = participant_number - 1
    t = trial_number - 1

    # Load data
    x_data = x_left_merged[p, t, :]
    t_data = time_merged[p, t, :]
    fixation_start = fixation_start_times[p, t]
    fixation_end = fixation_end_times[p, t]
    onset_time = t_data[picture_onset_index]

    # Plotting
    plt.figure(figsize=(10, 5))
    plt.plot(t_data, x_data, color='black', label='X Position (Left Eye)')
    plt.axvline(x=onset_time, color='green', linestyle='--', label='Picture Onset')
    plt.axhline(y=lower_threshold, color='red', linestyle='--', label='Lower Threshold')
    plt.axhline(y=upper_threshold, color='red', linestyle='--', label='Upper Threshold')

    # Define fixation
    if not np.isnan(fixation_start) and not np.isnan(fixation_end):

        start_idx = np.nanargmin(np.abs(t_data - fixation_start))
        end_idx = np.nanargmin(np.abs(t_data - fixation_end))

        # Show First fixation
        plt.plot(t_data[start_idx:end_idx+1], x_data[start_idx:end_idx+1],
                 color='blue', linewidth=2, label='Detected Fixation')
        plt.axvline(x=fixation_start, color='purple', linestyle='--', label='Fixation Start')
        plt.axvline(x=fixation_end, color='orange', linestyle='--', label='Fixation End')
        plt.title(f"Participant {participant_number}, Trial {trial_number} – First Fixation")
    else:
        plt.title(f"Participant {participant_number}, Trial {trial_number} – ⚠️ No fixation detected")

    # Plotting
    plt.xlabel("Time (ms)")
    plt.ylabel("X Position (pixels)")
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()

plot_fixation(1, 1)

num_participants, num_trials = fixation_start_times.shape

# Empty list
records = []

# All paticipants and trials
for p in range(num_participants):
    for t in range(num_trials):
        fixation_time = fixation_start_times[p, t]

        records.append({
            "Participant": p + 1,
            "Trial": t + 1,
            "Fixation_Start_Time": fixation_time
        })

# DataFrame
first_fixation_df = pd.DataFrame(records)

first_fixation_df

# Count fixation numbers
valid_counts = first_fixation_df.groupby('Participant')['Fixation_Start_Time'].apply(lambda x: x.notna().sum())
invalid_counts = first_fixation_df.groupby('Participant')['Fixation_Start_Time'].apply(lambda x: x.isna().sum())


fig, ax = plt.subplots(figsize=(12, 8))
bar_width = 0.4
index = np.arange(len(valid_counts))

# Bars
bars1 = ax.bar(index, valid_counts, bar_width, label='Valid Trials', color='skyblue')
bars2 = ax.bar(index + bar_width, invalid_counts, bar_width, label='Invalid Trials (Missing)', color='salmon')

# Grid
ax.yaxis.grid(True, linestyle='--', alpha=0.7)


for bar in bars1:
    height = bar.get_height()
    ax.annotate(f'{int(height)}',
                xy=(bar.get_x() + bar.get_width() / 2, height),
                xytext=(0, 3),
                textcoords="offset points",
                ha='center', va='bottom', fontsize=8)

for bar in bars2:
    height = bar.get_height()
    ax.annotate(f'{int(height)}',
                xy=(bar.get_x() + bar.get_width() / 2, height),
                xytext=(0, 3),
                textcoords="offset points",
                ha='center', va='bottom', fontsize=8)

# plot
ax.set_xlabel('Participant', fontsize=12)
ax.set_ylabel('Number of Trials', fontsize=12)
ax.set_title('Valid vs Invalid Trials per Participant', fontsize=14)
ax.set_xticks(index + bar_width / 2)
ax.set_xticklabels(valid_counts.index, rotation=45)
ax.legend()

plt.tight_layout()
plt.show()